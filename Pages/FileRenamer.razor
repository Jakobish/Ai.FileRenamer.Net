@page "/file-renamer"
@inject IJSRuntime JSRuntime
@inject FileDbContext DbContext
@inject IFileProcessingService FileProcessingService
@using FileRenamerProject.Services


<PageTitle>PDF File Renamer</PageTitle>


<div class="file-renamer-container">
    <h1 class="title">PDF File Renamer</h1>

    <section class="file-selection">
        <label for="filePicker">Select PDF Files:</label>
        <input type="file" id="filePicker" multiple accept=".pdf" @onchange="OnFilesSelected" disabled="@IsProcessing"
            title="Select PDF files to rename" />
    </section>

    <section class="processing-controls">
        <button @onclick="ProcessFiles" class="scan-button" disabled="@(!Files.Any() || IsProcessing)"
            title="Start processing selected files">
            @if (IsProcessing)
            {
                <span>Processing... (@_processedCount of @Files.Count)</span>
            }
            else
            {
                <span>Process Files</span>
            }
        </button>
        @if (IsProcessing)
        {
            <button @onclick="CancelProcessing" class="cancel-button"
                title="Cancel the ongoing file processing">Cancel</button>
        }
    </section>

    <section class="progress-display" hidden="@(!IsProcessing)">
        <div class="overall-progress-bar">
            <div class="progress-bar" style="width: @(Files.Count > 0 ? (_processedCount * 100 / Files.Count) : 0)%">
                <span class="progress-text">@(Files.Count > 0 ? (_processedCount * 100 / Files.Count) : 0)%</span>
            </div>
        </div>
    </section>

    <section class="detailed-progress" hidden="@(!_progress.IsProcessing)">
        <div class="progress-messages">
            @foreach (var message in _progress.Messages)
            {
                <div>@message</div>
            }
        </div>
        <div class="progress-container">
            <div class="progress-info">
                <span>Overall Progress: @Math.Round(_progress.OverallProgress)%</span>
                <span>Current File: @_progress.CurrentFileName</span>
                <span>Status: @_progress.CurrentStatus</span>
            </div>
            <div class="progress-bar-container">
                <div class="progress-bar" style="width: @(_progress.OverallProgress)%"></div>
            </div>
            <div class="batch-progress">
                <span>Current Batch: @_progress.CurrentBatchProcessed of @_progress.CurrentBatchSize</span>
                <div class="progress-bar-container">
                    <div class="progress-bar" style="width: @(_progress.BatchProgress)%"></div>
                </div>
            </div>
        </div>
    </section>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
            <button @onclick="@(() => ErrorMessage = null)" class="close-button">Ã—</button>
        </div>
    }

    <section class="file-table" hidden="@(!Files.Any())">
        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>File Name</th>
                    <th>Path</th>
                    <th>Suggested Name</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in Files)
                {
                    <tr>
                        <td>@file.Id</td>
                        <td>@file.FileName</td>
                        <td>@file.FilePath</td>
                        <td>@file.SuggestedName</td>
                        <td>
                            @if (file.Status == "Processing")
                            {
                                <div class="spinner"></div>
                            }
                            else
                            {
                                @file.Status
                            }
                        </td>
                        <td>
                            @if (file.Status == "Completed")
                            {
                                <button @onclick="() => ApplyRename(file)" class="rename-button"
                                    title="Apply the suggested name to this file">Apply</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </section>

</div>

@code
{
    private List<FileRenamerProject.Data.FileRecord> Files = new();
    private bool IsProcessing;
    private string? ErrorMessage;
    private int _processedCount;
    private CancellationTokenSource _cts = new();
    private ProgressState _progress = new();

    private async Task OnFilesSelected(ChangeEventArgs e)
    {
        try
        {
            Files.Clear();
            ErrorMessage = null;
            _progress.Reset();

            var fileInfos = await JSRuntime.InvokeAsync<IEnumerable<FileInfo>>("getPDFsFromFilePicker");

            if (fileInfos == null)
            {
                ErrorMessage = "No files selected.";
                return;
            }

            foreach (var fileInfo in fileInfos)
            {
                if (string.IsNullOrWhiteSpace(fileInfo.name) || string.IsNullOrWhiteSpace(fileInfo.path))
                {
                    ErrorMessage = "Invalid file information received.";
                    return;
                }

                if (!fileInfo.name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
                {
                    ErrorMessage = $"File '{fileInfo.name}' is not a PDF file. Only PDF files are supported.";
                    return;
                }

                Files.Add(new FileRecord
                    {
                        Id = Files.Count + 1,
                        FileName = fileInfo.name,
                        FilePath = fileInfo.path,
                        SuggestedName = "",
                        Status = "Pending"
                    });
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error selecting files: {ex.Message}. Please try again.";
            Files.Clear();
        }
    }

    private class FileInfo
    {
        public string name { get; set; } = string.Empty;
        public string path { get; set; } = string.Empty;
    }

    private async Task ProcessFiles()
    {
        if (!Files.Any())
        {
            ErrorMessage = "No files to process.";
            return;
        }

        try
        {
            IsProcessing = true;
            _processedCount = 0;
            ErrorMessage = null;

            using (_cts = new CancellationTokenSource())
            {
                await FileProcessingService.ProcessFilesAsync(Files, _cts.Token);
            }

            _progress.Complete();
        }
        catch (OperationCanceledException)
        {
            ErrorMessage = "Operation was cancelled.";
            // Reset status for files that weren't processed
            foreach (var file in Files.Where(f => f.Status == "Processing"))
            {
                file.Status = "Pending";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing files: {ex.Message}. Please check the file format and try again.";
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private class ProgressState
    {
        public bool IsProcessing { get; set; }
        public double OverallProgress { get; set; }
        public string CurrentFileName { get; set; } = string.Empty;
        public string CurrentStatus { get; set; } = string.Empty;
        public int CurrentBatchProcessed { get; set; }
        public int CurrentBatchSize { get; set; }
        public double BatchProgress => CurrentBatchSize > 0 ? (CurrentBatchProcessed * 100.0 / CurrentBatchSize) : 0;
        public List<string> Messages { get; } = new();

        public void UpdateProgress(string fileName, string status)
        {
            CurrentFileName = fileName;
            CurrentStatus = status;
            Messages.Add($"{fileName}: {status}");
        }

        public void Reset()
        {
            IsProcessing = false;
            OverallProgress = 0;
            CurrentFileName = string.Empty;
            CurrentStatus = string.Empty;
            CurrentBatchProcessed = 0;
            CurrentBatchSize = 0;
            Messages.Clear();
        }

        public void Complete()
        {
            IsProcessing = false;
            CurrentStatus = "All files processed.";
            Messages.Add(CurrentStatus);
        }
    }

    private async Task ProcessSingleFile(FileRecord file)
    {
        if (file == null) return;

        try
        {
            file.Status = "Processing";
            _progress.UpdateProgress(file.FileName, $"Processing {file.FileName}...");
            StateHasChanged();

            // Get the file bytes using JavaScript interop
            var fileBytes = await JSRuntime.InvokeAsync<byte[]>("getFileBytes", file.FilePath);
            _cts.Token.ThrowIfCancellationRequested();

            if (fileBytes == null || fileBytes.Length == 0)
            {
                throw new InvalidOperationException("File is empty or could not be read");
            }

            // Extract text from PDF
            var content = await PdfService.ExtractTextFromPdfAsync(fileBytes);
            _cts.Token.ThrowIfCancellationRequested();

            if (string.IsNullOrWhiteSpace(content))
            {
                throw new InvalidOperationException("No text could be extracted from the PDF");
            }

            // Get AI suggestion
            var suggestedName = await PdfService.GetSuggestedNameFromAIAsync(file.FileName, content);
            _cts.Token.ThrowIfCancellationRequested();

            if (string.IsNullOrWhiteSpace(suggestedName))
            {
                throw new InvalidOperationException("Could not generate a suggested name");
            }

            // Sanitize the suggested name
            suggestedName = string.Join("_", suggestedName.Split(Path.GetInvalidFileNameChars()));
            file.SuggestedName = suggestedName;
            file.Status = "Completed";
            _progress.UpdateProgress(file.FileName, $"Completed processing {file.FileName}.");

            var existingFile = DbContext.Files.FirstOrDefault(f => f.FilePath == file.FilePath);
            if (existingFile != null)
            {
                DbContext.Entry(existingFile).CurrentValues.SetValues(file);
            }
            else
            {
                DbContext.Files.Add(file);
            }

            _processedCount++;
        }
        catch (Exception ex)
        {
            file.Status = "Error";
            file.SuggestedName = ex.Message;
            _progress.UpdateProgress(file.FileName, "Error");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private Task CancelProcessing()
    {
        _cts.Cancel();
        return Task.CompletedTask;
    }

    private async Task ApplyRename(FileRecord file)
    {
        if (file == null) return;

        try
        {
            await FileProcessingService.ApplyRenameAsync(file);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error renaming file: {ex.Message}";
            file.Status = "Error";
        }
    }
}
